package watch

import (
	"errors"

	"github.com/wxc/cmdb/storage/stream/types"
)

type EventType string

const (
	Create  EventType = "create"
	Update  EventType = "update"
	Delete  EventType = "delete"
	Unknown EventType = "unknown"
)

func (e EventType) Validate() error {
	switch e {
	case Create, Update, Delete:
		return nil
	default:
		return errors.New("unsupported event type")
	}
}

func ConvertOperateType(typ types.OperType) EventType {
	switch typ {
	case types.Insert:
		return Create
	case types.Replace, types.Update:
		return Update
	case types.Delete:
		return Delete
	default:
		return Unknown
	}
}

type ChainNode struct {
	// self increasing id, used for sequential batch query
	ID uint64 `json:"id" bson:"id"`
	// event's cluster time
	ClusterTime types.TimeStamp `json:"cluster_time" bson:"cluster_time"`
	// event's document object id, as is the value of "_id" in a document.
	Oid string `json:"oid" bson:"oid"`
	// event's type
	EventType EventType `json:"type" bson:"type"`
	// event's resume token, if token is "", then it's a head, and no tail
	Token string `json:"token" bson:"token"`
	// generated by cmdb, and is 1:1 with mongodb's resume token
	// the current node's cursor
	Cursor string `json:"cursor" bson:"cursor"`
	// InstanceID object instance's ID, preserved for latter event aggregation operation
	InstanceID int64 `json:"inst_id,omitempty" bson:"inst_id,omitempty"`
	// SubResource the sub resource if the watched resource, eg. the object ID of the instance resource
	SubResource string `json:"bk_sub_resource,omitempty" bson:"bk_sub_resource,omitempty"`
}

type LastChainNodeData struct {
	Coll        string          `json:"_id" bson:"_id"`
	ID          uint64          `json:"id" bson:"id"`
	Token       string          `json:"token" bson:"token"`
	Cursor      string          `json:"cursor" bson:"cursor"`
	StartAtTime types.TimeStamp `json:"start_at_time,omitempty" bson:"start_at_time,omitempty"`
}
